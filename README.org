#+TITLE: Multi-echo Combinations

This repository provides a command line tool to combine multiple echoes from a multi-echo BOLD fMRI acquisition.
It currently provides three different combination algorithms:

 - Simple Average :: Echoes are averaged.
 - CNR Weighting (a.k.a. PAID) :: Echoes are weighted by their TE*SNR contributions, then averaged.
 - TE :: Echoes are weighted by their TEs.

/MECOMBINE/ is alpha software. Please report if you find any bugs or if you have any feature requests. 

For more information on multiecho acquisition and combination schemes, please refer to (for example):

[[https://onlinelibrary.wiley.com/doi/full/10.1002/mrm.20900][Poser et al. (2006)]]. “BOLD Contrast Sensitivity Enhancement and Artifact Reduction with Multiecho EPI: Parallel-Acquired Inhomogeneity- Desensitized fMRI.” Magn. Reson. Med. 55:6, pp. 1227–35.

[[https://doi.org/10.1016/j.neuroimage.2011.10.057][Posse, Stefan (2012).]] “Multi-Echo Acquisition”. NeuroImage 62:2, pp. 665–671.

* Installation

To install, clone this repository and run the following on the root folder of the repository:

#+BEGIN_SRC sh
$ python setup.py install
#+END_SRC

To install as a developer:

#+BEGIN_SRC sh
$ python setup.py develop
#+END_SRC

The tool only supports Python 3.6+.

* Usage

Once installed, a command line tool called mecombine will be available in your PATH. Detailed usage information can be found by running:

#+BEGIN_SRC sh
mecombine --help
#+END_SRC

In short,  =mecombine= is being designed to work with the Brain Imaging Data Structure (BIDS). Recommended usage is:

#+BEGIN_SRC sh
mecombine '/project/number/experiment-datasets/sub-01/func/*task-A_*echo-*.nii.gz' --outputname 'echoes_combined' --saveweights
#+END_SRC

Which, if your folder is BIDS compliant, should work out of the box. Because =mecombine= accepts a /glob-like/ pattern, be sure to check that not too many files are being read. Currently, =mecombine= has no proper logging implemented, but it'll print the names of the files being combined, as well as their echoes.

You may also use =multiecho= as a library.
To do the echo combination from within Python:

#+BEGIN_SRC python
import multiecho.combination as me
echoes = me.load_me_data('/project/datasets/sub-01/ses-01/func/*mbme*.nii.gz')
paid_data, weights = me.me_combine(echoes, algorithm='paid')
#+END_SRC

* License

Multiecho is distributed under the terms of both

- [[https://choosealicense.com/licenses/mit][MIT License]]
- [[https://choosealicense.com/licenses/apache-2.0][Apache License, Version 2.0]]

at your option.


* Caveats

Currently inneficient as we load all datasets into memory. We could iterate
through the volumes and only keep the final combined series in memory at any
given time, but that's for later.

You may receive a RuntimeWarning when combining echoes with PAID. If your datasets have voxels with 0s, e.g., if they were masked, a division by 0 will lead to infinite weights. You may safely ignore the warning, but do check your data after the combination.

PAID will compute the weights based on the last 100 volumes of the acquisition. Whether this is optimal or not is up to discussion. If you are testing out the combination on a small subset of volumes, say 5 or so, then the weights won't be stable and your image may look noisy.
